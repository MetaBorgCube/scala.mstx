import stdlib.paths
import stdlib.lists

// path-expr-with-path-steps : Path * List(Id)
path-expr-with-path-steps(p, psteps) :- p match
  { SID2P(stable_id) -> stable_id match
      { Id(id) -> psteps == id:[]
      | Path(path, id) -> {psteps0}
          path-expr-with-path-steps(path, psteps0)
        , append(psteps0, id:[], psteps)
      }
  }.

resolve-unqualified-obj-scope(s, id, s_obj) :- {lbl, decl, d}
    resolve-unqualified-decl(s, id, lbl, decl)
  , decl -> d
  , d match { (_, OBJECT(s0)) -> s_obj == s0 }.

resolve-unqualified-def-ty(s, id, ty) :- {decl, d}
    resolve-unqualified-def-decl(s, id, decl)
  , decl -> d
  , d match { (_, ty0) -> ty == ty0 }.

resolve-unqualified-decl(s, id, lbl, decl) :- {defs, matches, visible, p}
    query s `LEX* (`IMPORT|`WILDCARD)? (`DEF|`OBJ) as defs
  , filter defs ((name, _) where name == id) matches
  , min matches lexico(`DEF < `LEX,
                       `DEF < `IMPORT,
                       `DEF < `WILDCARD,
                       `IMPORT < `WILDCARD) visible
  , only(visible, p)
  , tgt(p, decl)
  , tgt-lbl(p, lbl).

resolve-unqualified-def-decl(s, id, decl) :- {defs, matches, visible, p}
    query s `LEX* (`IMPORT|`WILDCARD)? `DEF as defs
  , filter defs ((name, _) where name == id) matches
  , min matches lexico(`DEF < `LEX,
                       `DEF < `IMPORT,
                       `DEF < `WILDCARD,
                       `IMPORT < `WILDCARD) visible
  , only(visible, p)
  , tgt(p, decl).


resolve-qualified-obj-scope(s, id, s_obj) :- {defs, matches, visible, p, d}
    query s `OBJ as defs
  , filter defs ((name, _) where name == id) matches
  , only(matches, p)
  , datum(p, d)
  , d match { (_, OBJECT(s0)) -> s_obj == s0 }.

resolve-qualified-decl(s, id, lbl, decl) :- {defs, matches, visible, p}
    query s (`DEF|`OBJ) as defs
  , filter defs ((name, _) where name == id) matches
  , only(matches, p)
  , tgt(p, decl)
  , tgt-lbl(p, lbl).

resolve-qualified-def-ty(s, id, ty) :- {decl, d}
    resolve-qualified-def-decl(s, id, decl)
  , decl -> d
  , d match { (_, ty0) -> ty == ty0 }.

resolve-qualified-def-decl(s, id, decl) :- {defs, matches, p}
    query s `DEF as defs
  , filter defs ((name, _) where name == id) matches
  , only(matches, p)
  , tgt(p, decl).
