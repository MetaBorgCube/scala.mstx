import stdlib.paths
import stdlib.lists

// Resolve a name locally in a given scope to a set of declarations in that scope
local-decls(s, ps) :-
  query s (`VAL|`TYPE) as ps.

resolve-local-decl(s, name, decls) :- {ps}
  local-decls(s, ps)
  , filter ps ((name', _) where name' == name) decls.

resolve-object(s, id, s_obj) :- {vs, matches, ps, p}
  query s `B*(`P`B*)*(`W|`I)?`VAL as vs
  , filter vs ((name, _) where name == id) matches
  , min matches scala ps
  , only(ps, p)
  , {n} datum(p, (n, OBJECT(s_obj))).

// resolve-unqualified-obj-scope(s, id, s_obj) :- {lbl, decl, d}
//     resolve-unqualified-decl(s, id, lbl, decl)
//   , decl -> d
//   , d match { (_, OBJECT(s0)) -> s_obj == s0 }.

// resolve-unqualified-def-ty(s, id, ty) :- {decl, d}
//     resolve-unqualified-def-decl(s, id, decl)
//   , decl -> d
//   , d match { (_, ty0) -> ty == ty0 }.

// resolve-unqualified-decl(s, id, lbl, decl) :- {defs, matches, visible, p}
//     query s ((`LEX | `EPS)* (`IMPORT|`WILDCARD)? (`DEF|`OBJ)) as defs
//   , filter defs ((name, _) where name == id) matches
//   , min matches lexico(`DEF < `LEX,
//                        `DEF < `IMPORT,
//                        `DEF < `WILDCARD,
//                        `OBJ < `LEX,
//                        `OBJ < `IMPORT,
//                        `OBJ < `WILDCARD,
//                        `OBJ < `EPS,
//                        `IMPORT < `WILDCARD) visible
//   , only(visible, p)
//   , tgt(p, decl)
//   , tgt-lbl(p, lbl).

// resolve-unqualified-def-decl(s, id, decl) :- {defs, matches, visible, p}
//     query s ((`LEX | `EPS)* (`IMPORT|`WILDCARD)? `DEF) as defs
//   , filter defs ((name, _) where name == id) matches
//   , min matches lexico(`DEF < `LEX,
//                        `DEF < `IMPORT,
//                        `DEF < `WILDCARD,
//                        `DEF < `EPS,
//                        `IMPORT < `WILDCARD) visible
//   , only(visible, p)
//   , tgt(p, decl).


// resolve-qualified-obj-scope(s, id, s_obj) :- {defs, matches, visible, p, d}
//     query s `OBJ as defs
//   , filter defs ((name, _) where name == id) matches
//   , min matches lexico(`DEF < `FWD,
//                        `DEF < `BWD) visible
//   , only(visible, p)
//   , datum(p, d)
//   , d match { (_, OBJECT(s0)) -> s_obj == s0 }.

// resolve-qualified-decl(s, id, lbl, decl) :- {defs, matches, visible, p}
//     query s (`DEF|`OBJ) as defs
//   , filter defs ((name, _) where name == id) matches
//   , min matches lexico(`DEF < `FWD,
//                        `DEF < `BWD) visible
//   , only(visible, p)
//   , tgt(p, decl)
//   , tgt-lbl(p, lbl).

// resolve-qualified-def-ty(s, id, ty) :- {decl, d}
//     resolve-qualified-def-decl(s, id, decl)
//   , decl -> d
//   , d match { (_, ty0) -> ty == ty0 }.

// resolve-qualified-def-decl(s, id, decl) :- {defs, matches, p}
//     query s `DEF as defs
//   , filter defs ((name, _) where name == id) matches
//   , only(matches, p)
//   , tgt(p, decl).
