import stdlib.paths
import stdlib.lists
import stdlib.sets

// ps are all local value and type declarations in s
local-decls(s, ps) :-
  query s (`VAL|`TYPE) as ps.

// name resolves locally in s to a set of paths ps
resolve-local-decl(s, name, decls) :- {ps}
  local-decls(s, ps)
  , filter ps ((name', _) where name' == name) decls.

// id is an object with scope s_obj that can be referenced from s
resolve-object(s, id, s_obj) :- {vs}
  query s `B*(`P`B*)*(`W|`I)?`VAL as vs
  , disambiguate-object(vs, id, s_obj).

// id is an object with scope s_obj that is locally defined in s
resolve-object-locally(s, id, s_obj) :- {vs}
  local-decls(s, vs)
  , disambiguate-object(vs, id, s_obj).

// id is an unambiguous reference to an object with scope s_obj from the 
// scope described by the path set reach
disambiguate-object(reach, id, s_obj) :- {matches, ps, p}
  filter reach ((name, _) where name == id) matches
  , min matches scala ps
  , only(ps, p)
  , datum(p, (id, s_obj)).

// value variable named id is bound in s to a declaration of type ty
var-ok(s, id, ty) :- {types, matches, visible, sd}
  query s (`B*(`P`B*)*(`I|`W)?`VAL) as types
  , filter types ((name, _) where name == id) matches
  , min matches scala visible
  // the scala spec states that ambiguity is okay, as long as
  // they all resolve in the end to the same declaration
  , inhabited(visible)
  , same-target(visible, sd)
  , sd -> (id, ty).

// type name id is bound in s to type identity ty
typeref-ok(s, id, ty) :- {types, matches, visible, sd}
  query s (`B*(`P`B*)*(`I|`W)?`TYPE) as types
  , filter types ((name, _) where name == id) matches
  , min matches scala visible
  // the scala spec states that ambiguity is okay, as long as
  // they all resolve in the end to the same declaration
  , inhabited(visible)
  , same-target(visible, sd)
  , sd -> (id, ty).
