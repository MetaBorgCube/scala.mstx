import stdlib.sets
import scala.statements
import scala.type
import scala.expr

no-duplicate-values(s, name) :- {defs, matches}
    query s `VAL as defs
  , filter defs ((name', _) where name' == name) matches
  , singleton(matches).

object-def-ok(s_mod, s, def) :- def match
  { ObjectDef(name, ext_clause, body) -> {s_obj, s_imp}
      new s_obj -> (name, s_obj)

    // declare
    , s_mod -[ `VAL ]-> s_obj
    , no-duplicate-values(s_mod, name)

    // link the object
    , s_obj -[ `P ]-> s

    // check the body
    , template-body-ok(s_obj, s_obj, body)
  }.

extends-clause-ok(s, s_obj, ext_clause) :- ext_clause match
  { NoExtends() -> true
  | _           -> false // FIXME
  }.

template-body-ok(s_mod, s, body) :- body match
  { TemplateBody(self_type, stmts) -> stmts-ok(s_mod, s, stmts) // FIXME
  }.
