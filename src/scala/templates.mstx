import stdlib.sets
import scala.statements
import scala.type
import scala.expr

no-duplicate-values(s, name, ty) :- {defs, matches}
    query s `VAL as defs
  , filter defs ((name', ty') where name' == name) matches
  , singleton(matches).

definition-ok(s_mod, s, def) :- def match
  { ValDef(name, ty, e) -> {s_val, cls, typ}
      new s_val -> (name, typ)
      , s_mod -[ `VAL ]-> s_val 

      , type-ok(s, ty, cls)
      , class-instance(cls, typ)
      , expr-ok(s, e, typ)
  | OD2TD(od) -> object-def-ok(s_mod, s, od)
  }.

object-def-ok(s_mod, s, def) :- def match
  { ObjectDef(name, ext_clause, body) -> {s_obj, s_imp, self}
      self == OBJECT(s_obj)
    , new s_obj -> (name, self)

    // declare
    , s_mod -[ `VAL ]-> s_obj
    , no-duplicate-values(s_mod, name, self)

    // link the object
    , s_obj -[ `P ]-> s

    // check the body
    , template-body-ok(s_obj, s_obj, body)
  }.

extends-clause-ok(s, s_obj, ext_clause) :- ext_clause match
  { NoExtends() -> true
  | _           -> false // FIXME
  }.

template-body-ok(s_mod, s, body) :- body match
  { TemplateBody(self_type, stmts) -> stmts-ok(s_mod, s, stmts) // FIXME
  }.
