import stdlib.paths
import stdlib.bools
import stdlib.maybe

import scala.type.reference
import scala.paths

// Import-expression e resolved relative to s', imports into s.
iimport-ok(s, s', e) :- e match
  { ImportExpr(path, grp) -> {s_obj}
      resolve-path(s', path, s_obj)
      , iimports-selector(s, s_obj, grp)
  }.

iimports-selector(s, s_obj, grp) :- grp match
  { IId(id) -> {lbl, s_imp, decls}
      resolve-local-decl(s_obj, id, decls)
      , new s_imp
      , s -[ `I ]-> s_imp
      , has-decls(s_imp, decls)
  | IWild() ->
      s -[ `W ]-> s_obj
  | IReveal(sels) -> {s_imp, decls}
      new s_imp
      , s -[ `I ]-> s_imp
      , local-decls(s_obj, decls)
      , imports-list(s_imp, decls, sels)
      , renamings(s_imp, decls, sels)
  | IHide(sels) -> {s_imp, decls}
      new s_imp
      , s -[ `I ]-> s_imp
      , local-decls(s_obj, decls)
      , imports-everything-but(s_imp, decls, sels)
      , renamings(s_imp, decls, sels)
  }.

imports-list(s, ps, sels) :-
  every ps (p -> {l, sd, sel, id, ty}
      last(p, l, sd)
      , sd -> (id, ty)
      , selects(id, sels, sel)
      , sel match { True() -> has-decl(s, l, sd) | False() -> true }).

imports-everything-but(s, ps, sels) :-
  every ps (p -> {l, sd, sel, id, ty}
      last(p, l, sd)
      , sd -> (id, ty)
      , hides(id, sels, sel)
      , sel match { False() -> has-decl(s, l, sd) | True() -> true }).

renamings(s, ps, sels) :-
  every ps (p -> {l, sd, id, to, ty}
      last(p, l, sd)
      , sd -> (id, ty)
      , renames(id, sels, to)
      , to match
        { Nothing() -> true
        | Just(id') -> {sd'} new sd' -> (id', ty), has-decl(s, l, sd') }).

// sel is a boolean indinciating whether id is hidden
// by import selectors sels
hides(id, sels, sel) :- sels match
  { []   -> is-false(sel)
  | s:xs -> {s1, s2}
      pattern-hides(id, s, s1)
      , hides(id, xs, s2)
      , or(s1, s2, sel)
  }.

// sel is a boolean indinciating whether id is selected
// by import selectors sels
selects(id, sels, sel) :- sels match
  { []   -> is-false(sel)
  | s:xs -> {s1, s2}
      pattern-selects(id, s, s1)
      , selects(id, xs, s2)
      , or(s1, s2, sel)
  }.

// id' is a maybe string indicating if and how id
// is renamed by sels
renames(id, sels, id') :- sels match
  { []   -> id' == Nothing()
  | s:xs -> {s1, s2, id1, id2}
      pattern-renames(id, s, id1)
      , renames(id, xs, id2)
      , maybe-or(id1, id2, id')
  }.

pattern-selects(id, sel, b) :- sel match
  { Select(x) where x == id -> is-true(b)
  | _                       -> is-false(b)
  }.

pattern-hides(id, sel, b) :- sel match
  { Hide(x) where x == id -> is-true(b)
  | _                     -> is-false(b)
  }.

pattern-renames(id, sel, id') :- sel match
  { Rename(x, y) where x == id -> id' == Just(y)
  | _                          -> is-nothing(id')
  }.

// s is a scope with all value/type declarations in decls
has-decls(s, decls) :-
  every decls (p -> {l, d} last(p, l, d) , has-decl(s, l, d)).

// d is a value/type declaration in s
has-decl(s, l, d) :- l match
  { `VAL  -> s -[ `VAL ]-> d
  | `TYPE -> s -[ `TYPE ]-> d
  | _     -> true
  }.
