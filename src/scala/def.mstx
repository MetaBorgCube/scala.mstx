import stdlib.lists
import stdlib.sets

import scala.templates
import scala.expr
import scala.type

// Scala allows overloaded defs, but not duplicate defs
no-duplicate-defs(s, name, ty) :- {defs, matches}
    query s `DEF as defs
  , filter defs ((name', ty') where name' == name, ty' == ty) matches
  , singleton(matches).

def-ok(s_mod, s, def) :- def match
  { TD2DF(typedef) -> type-definition-ok(s_mod, s, typedef)
  | VD2DF(valdef)  -> val-definition-ok(s_mod, s, valdef)
  | TM2DF(tmpldef) -> template-def-ok(s_mod, s, tmpldef)
  }.
  
val-definition-ok(s_mod, s, valdef) :- valdef match
  { ValDef(name, ty, e) -> {s_val, cls, typ}
      new s_val -> (name, typ)
      , s_mod -[ `VAL ]-> s_val 
      , type-ok(s, ty, cls)
      , expr-ok(s, e, typ)
      , class-instance(cls, typ) 
  }.

template-def-ok(s_mod, s, def) :- def match
  { OD2TM(od) -> object-def-ok(s_mod, s, od)
  }.

type-definition-ok(s_mod, s, tydef) :- tydef match
  { TypeDef(name, decl) -> type-decl(s_mod, s, name, decl)
  }.
