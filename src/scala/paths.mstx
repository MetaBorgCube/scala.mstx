import stdlib.lists
import stdlib.paths
import scala.type.reference

// relate a path to a list of identifiers
path-to-list(p, psteps) :- p match
  { UnqualifiedId(id) -> psteps == id:[]
  | QualifiedId(path, id) -> {psteps0}
      path-to-list(path, psteps0)
      , append(psteps0, id:[], psteps)
  }.

// path p resolves in s to an object with scope s_inner
resolve-path(s, p, s_inner) :- {ids}
    path-to-list(p, ids)
  , ids match { id:ids' -> // paths have length at least one
      {s_obj}
        resolve-object(s, id, s_obj)
      , resolve-path-ids(s_obj, ids', s_inner)
    }.

// the sequence of ids resolves recursively, locally in s_obj to s_inner
resolve-path-ids(s_obj, ids, s_inner) :- ids match
  { []     -> s_obj == s_inner
  | id:ids -> {s_obj'}
      resolve-object-locally(s_obj, id, s_obj')
      , resolve-path-ids(s_obj', ids, s_inner)
  }.
