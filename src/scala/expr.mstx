import scala.type
import stdlib.paths
import scala.type.reference
import scala.paths

expr-ok(s, e, ty) :- e match
  { Lit(l)       -> literal-ok(s, l, ty)
  | PathExpr(pe) -> path-expr-ok(s, pe, ty)
  | _            -> false // other expressions are not supported
  }.

path-expr-ok(s, p, ty) :- p match
  { UnqualifiedId(id)   -> var-ok(s, id, ty)
  | QualifiedId(p', id) -> {s_obj, ps, op, s_d}
      resolve-path(s, p', s_obj)
      , resolve-local-decl(s_obj, id, ps)
      , only(ps, op)
      , tgt(op, s_d)
      , s_d -> (id, ty)
  }.

literal-ok(s, l, ty) :- l match
  { IntLit(n)   -> predef-type-instance(s, "Int", ty)
  | BoolLit(b)  -> predef-type-instance(s, "Boolean", ty)
  }.
