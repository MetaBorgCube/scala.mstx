import scala.type
import stdlib.paths
import scala.type.reference
import scala.paths

expr-ok(s, e, ty) :- e match
  { Lit(l) ->
      literal-ok(s, l, ty)
  | PathExpr(SID2P(p)) -> // unqualified
      path-expr-ok(s, p, ty)
  | PathExpr(StableId(p)) -> // qualified
      path-expr-ok(s, p, ty)
  | _ -> false // FIXME
  }.

literal-ok(s, l, ty) :- l match
  { IntLit(n) -> predef-type-ok(s, "Int", ty)
  | BoolLit(b) -> b match
      { True()  -> predef-type-ok(s, "Boolean", ty)
      | False() -> predef-type-ok(s, "Boolean", ty)
      }
  }.

path-expr-ok(s, p, ty) :- p match
  { Path(p', id) -> {s_obj, ps, p, n, ty'}
      resolve-path(s, p, OBJECT(n, s_obj))
      , resolve-local-decl(s_obj, id, ps)
      , only(ps, p)
      , last(p, `VAL, ty')
      , compatible-ty(ty, ty')
  }.
