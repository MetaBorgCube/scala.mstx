import stdlib.paths
import stdlib.lists

import scala.type
import scala.type.reference
import scala.paths
import scala.statements

expr-ok(s, e, ty) :- e match
  { Lit(l)       -> literal-ok(s, l, ty)
  | PathExpr(pe) -> path-expr-ok(s, pe, ty)
  | BE2EX(be)    -> block-expr-ok(s, be, ty)
  | Call(f, es)  -> {paramtys, argtys}
        expr-ok(s, f, FUN(paramtys, ty))
      , exprs-ok(s, es, argtys)
      , pointwise-equal(paramtys, argtys)
  | _            -> false // other expressions are not supported
  }.
  
exprs-ok(s, es, tys) :- es match
  { [] -> tys == []
  | e:es -> {ty, tys'} expr-ok(s, e, ty), exprs-ok(s, es, tys'), tys == ty:tys'
  }.

maybe-expr-ok(s, me, ty) :- me match
  { Some(e) -> expr-ok(s, e, ty)
  | None()  -> predef-type(s, "Unit", ty)
  }.

block-expr-ok(s, be, ty) :- be match
  { BL2BE(block) -> block-ok(s, block, ty)
  }.
  
block-ok(s, bl, ty) :- bl match
  { Block(bstmts, e) -> {s_block, block_ty, s'}
      new s_block -> BLOCK()
      , s_block -[ `P ]-> s
      , block-statements-ok(s_block, s_block, bstmts, block_ty, s')
      , e match 
        { Some(e') -> expr-ok(s', e', ty)
        | None()   -> ty == block_ty
        }
  }.

path-expr-ok(s, p, ty) :- p match
  { UnqualifiedId(id)   -> var-ok(s, id, ty)
  | QualifiedId(p', id) -> {s_obj, ps, op, s_d}
      resolve-path(s, p', s_obj)
      , resolve-local-decl(s_obj, id, ps)
      , only(ps, op)
      , tgt(op, s_d)
      , s_d -> (id, ty)
  }.

literal-ok(s, l, ty) :- l match
  { IntLit(n)   -> predef-type(s, "Int", ty)
  | BoolLit(b)  -> predef-type(s, "Boolean", ty)
  }.
